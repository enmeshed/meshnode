import { CommonError, PlainObjectMarshal } from '@enmeshed/errors'
import '../context/GlobalContext'
import util from 'util'

globalThis = require('globalthis')()

levelNameToNumber = {
  MIN: 1
  trace: 10
  debug: 20
  info: 30
  warn: 40
  error: 50
  fatal: 60
  MAX: 100
}

levelNumberToName = {...for key k, val v in levelNameToNumber: {[v]: k}}

export class Log:
  static levelNameToNumber(name) ->
    rst = levelNameToNumber[name]
    if rst~looseNotEq(null): rst else: 30

  static levelNumberToName(number) ->
    rst = levelNumberToName[number]
    if rst: rst else: "info"

  static addMiddleware(middleware, prepend = true): void ->
    ctx = Context.current()
    tracing = ctx.tracing
    if prepend:
      tracing.logFilters.unshift(middleware)
    else:
      tracing.logFilters.push(middleware)

  static addWriter(writer): void ->
    this.addMiddleware(writer, false)

  static doLog(ctx, data): void ->
    if not data.time: data.time = Date.now()
    if not data.level: data.level = "info"
    if not data.levelNumber: data.levelNumber = this.levelNameToNumber(this.level)
    filters = ctx?.tracing?.logFilters or []
    if filters:
      for elem filter in filters:
        filter.logEntry(data, ctx)
        if data._discard: return

  static tag(ctx, key, value, shouldPropagate = false): void ->
    ctx.tracing?.tag(key, value, shouldPropagate)

export class LogMiddleware:
  constructor(handler) ->
    if typeof(handler) == 'function':
      this.logEntry = handler.bind(this)

  // Called for each log entry the middleware sees.
  // eslint-disable-next-line @lightscript/no-unused-vars
  logEntry(data, context): void ->
    return

errorFilter = new LogMiddleware((data, ctx): void ->
  err = data.err or data.error
  if err and (err instanceof Error):
    delete data.err
    delete data.error
    if data.level == "error": {
      data.error = true
      data.event = "error"
      // When logging an error, if there is an OpenTracing span active
      // make sure it gets flagged
      ctx.tracing?.setSpanErrorFlags()
    } // if data.level == 'error'

    if not data.message: data.message = err.message
    data["error.message"] = err.message
    data["error.stack_trace"] = err.stack
    if (err instanceof CommonError):
      marshalledError = (new PlainObjectMarshal()).marshalError(err)
      data["error.type"] = marshalledError.errorClass
      data["error.dump"] = err.dump()
      data["error.status"] = err.getStatusName()
      data["error.retry"] = if err.retry: true else: false
)
Log.addMiddleware(errorFilter)

tagger = new LogMiddleware((data, ctx): void ->
  if ctx.tracing?.tags:
    data.labels = Object.assign({}, ctx.tracing.tags)
)
Log.addMiddleware(tagger)

export class LogWriter extends LogMiddleware:
  level = 0

  setLevel(lv): LogWriter ->
    if typeof(lv) == 'number':
      this.level = lv
    else:
      this.level = Log.levelNameToNumber(lv)
    this

  // Filter events to be logged.
  // eslint-disable-next-line @lightscript/no-unused-vars
  filter(data, context): boolean ->
    if data.levelNumber < this.level:
      false
    else:
      true

  // Write a log event that's passed the filter.
  // eslint-disable-next-line @lightscript/no-unused-vars
  writeToLog(data, context): Promise<void> ->
    Promise.resolve(undefined)

  // Log information, ignoring failures.
  logEntry(data, context): void ->
    if this.filter(data, context):
      this.writeToLog(data, context)
        .catch((err) ->
          // eslint-disable-next-line no-console
          console.error("Error while writing to log", err)
        )

// OpenTracing log writer
export class OpenTracingLogWriter extends LogWriter:
  writeToLog(data, ctx) ->
    span = ctx.tracing?.span
    if not span: return Promise.resolve(undefined)

    rec = Object.assign({}, data)

    // Time is injected separately for OpenTracing
    time = rec.time
    delete rec.time

    // Labels must appear at root level in OpenTracing log entries
    labels = rec.labels
    delete rec.labels
    Object.assign(rec, labels)

    span.log(rec, time)

    Promise.resolve(undefined)

// Always log to opentracing.
openTracingWriter = new OpenTracingLogWriter()
Log.addWriter(openTracingWriter)

// Variadic log function
export vaLog(levelNumber, ctx, ...args): void ->
  levelName = Log.levelNumberToName(levelNumber)

  data = { level: levelName, levelNumber, time: Date.now(), message: '' }

  if typeof(args[0]) == 'object':
    // log({fields}, ...message)
    Object.assign(data, args[0])
    if args.length > 1:
      data.message = util.formatWithOptions({ depth: 10 }, ...(args.slice(1)))
  elif typeof(args[0]) == 'string':
    // log(message, ...additional)
    data.message = util.formatWithOptions({ depth: 10 }, ...args)

  Log.doLog(ctx, data)

useContext(ctx) -> {
  tag(...args): void -> Log.tag(ctx, ...args)
  trace(...args): void -> vaLog(10, ctx, ...args)
  debug(...args): void -> vaLog(20, ctx, ...args)
  info(...args): void -> vaLog(30, ctx, ...args)
  warn(...args): void -> vaLog(40, ctx, ...args)
  error(...args): void -> vaLog(50, ctx, ...args)
  fatal(...args): void -> vaLog(60, ctx, ...args)
}

logMethods = {
  useContext
  tag(...args): void -> Log.tag(Context.current(), ...args)
  trace(...args): void -> vaLog(10, Context.current(), ...args)
  debug(...args): void -> vaLog(20, Context.current(), ...args)
  info(...args): void -> vaLog(30, Context.current(), ...args)
  warn(...args): void -> vaLog(40, Context.current(), ...args)
  error(...args): void -> vaLog(50, Context.current(), ...args)
  fatal(...args): void -> vaLog(60, Context.current(), ...args)
}

// Log capability is global.
globalThis.log = logMethods

export { logMethods as log }
