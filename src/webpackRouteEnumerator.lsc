import { partition, groupBy, startsWith } from 'lodash'
import { thisAsyncMiddleware } from './asyncMiddleware'

express = require('express')
debug = require('debug')('meshnode')


// Recursively enumerate a collection of routes from a Webpack context,
// requiring each one in turn.
export enumerateWebpackRoutes(basePath, split, req, router): void ->
  router.async = thisAsyncMiddleware
  // Determine which routes are in the current directory and which are in
  // subdirectories.
  [ local, subdirs ] = split~partition(x -> x.segments.length == 1)
  // Group the contents of subdirectories by directory name
  groupedSubdirs = subdirs~groupBy(x -> x.segments[0])
  // Collate local modules by key.
  localByKey = {...for elem e in local:
    {[e.segments[0]]: e}
  }

  before = localByKey['_before']?.requirePath
  after = localByKey['_after']?.requirePath

  if before:
    (req(before).default)(router, basePath)

  // Load local routes
  for key k, val v in localByKey:
    if not k~startsWith('_'):
      debug("enumerateWebpackRoutes: requiring", v.requirePath)
      (req(v.requirePath).default)(router, basePath)

  // Load subdirs
  for key k, val v in groupedSubdirs:
    nextRouter = express.Router()
    nextPath = `/${k}`
    router.use(nextPath, nextRouter)
    // Remove leading segment
    for elem e in v: e.segments.splice(0, 1)
    enumerateWebpackRoutes(nextPath, v, req, nextRouter)

  if after:
    (req(after).default)(router, basePath)

  // _before.js
  // preHandler = tryRequire(path.join(dir, '_before'))
  // preHandler?(router, basePath)

  // // Iterate the directory
  // for elem file in fs.readdirSync(dir):
  //   fullPath = path.join(dir, file)
  //   if endsWith(file, '.js') and (not startsWith(file, '_')):
  //     handler = tryRequire(fullPath)
  //     handler?(router, basePath)
  //   elif fs.statSync(fullPath).isDirectory!:
  //     nextRouter = express.Router()
  //     nextRouter.async = asyncMiddleware
  //     nextPath = `/${file}`
  //     router.use(nextPath, nextRouter)
  //     loadRoutes(nextPath, fullPath, nextRouter)

  // postHandler = tryRequire(path.join(dir, '_after'))
  // postHandler?(router, basePath)
