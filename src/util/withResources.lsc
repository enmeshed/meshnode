import { ResolutionContext, Namespace } from '@enmeshed/alpha'

export function withResources(depMap, fn) ->
  functionName = fn.name or '(anonymous)'
  contextName = 'fn:' + functionName

  (...args) -/>
    namespace = Namespace.globalNamespace
    { Dependencies } = namespace.constructor
    resolutionContext = new ResolutionContext(contextName)
    node = new (namespace.constructor.DependencyNode)()
    provider = {}
    setupContext = {
      resolutionContext
      dependencyNode: node
      provider
      namespace
      getNameArg() -> null
    }

    dependencies = Dependencies.from(depMap)
    { resolvedDependencies, strongRefs } <- dependencies.resolve(setupContext)
    node.injectDependencies(strongRefs)
    node.ref()

    let result
    try:
      now result <- fn(resolvedDependencies, ...args)
    catch err:
      throw err
    finally:
      node.deref().catch(-> return)

    result
