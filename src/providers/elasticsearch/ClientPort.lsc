import { Dependencies, Dependency, Container } from '@enmeshed/alpha'
import { GenericClientPort } from '../GenericClientPort'

{ Client } = require('@elastic/elasticsearch')

export class ElasticsearchClientPort extends GenericClientPort:
  static providerName = "elasticsearch.client.port"
  static dependencies = Dependencies.union(super.dependencies, {
    "mgr": Dependency.weak("elasticsearch.client.manager")
    "node": "node"
    "Config": "config"
  })

  startClient(): void -/>
    { service, provider, Config } = this
    log.info(`creating client for Elasticsearch service ${service.name}`)

    esConf = {
      nodes: provider.nodes
      // XXX: insecure but OK for now
      ssl: {
        rejectUnauthorized: false
      }
      sniffOnStart: true
    }

    if provider.user:
      esConf.auth = {
        username: provider.user
        password: Config.required(provider.passwordSecretId)
      }

    this.esConf = esConf
    this.client = new Client(esConf)

  stopClient(): void -/>
    log.info(`stopping Elasticsearch client for ${this.service.name}`)
    <- this.client.close()

  getClient() -> this.client

  getClientConfig() -> Object.assign({}, this.esConf)

  _createClient(opts) -> new Client(opts)

Container.provide(ElasticsearchClientPort)
