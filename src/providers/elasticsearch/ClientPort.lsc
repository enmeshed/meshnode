import { errors } from '@enmeshed/errors'
import { Provider, Dependency, Container } from '@enmeshed/alpha'

{ Client } = require('@elastic/elasticsearch')

export class ElasticsearchClientPort extends Provider:
  static providerName = "elasticsearch.client.port"
  static dependencies = {
    "mgr": Dependency.weak("elasticsearch.client.manager")
    "node": "node"
    "Config": "config"
  }

  static injectDependencies(dependencyMap, setupContext) -/>
    { mgr, Config } = dependencyMap
    setupContext._mgr = mgr // XXX
    serviceName = setupContext.getNameArg()
    if not serviceName:
      throw new errors.InvalidArgumentError("serviceName", "missing")

    service <- mgr.awaitService(serviceName)
    provider = service.getProvider()

    log.trace(`starting client for ${service.type} service: ${service.name}`)

    opts = {
      nodes: provider.nodes
      ssl: {
        rejectUnauthorized: false
      }
      sniffOnStart: true
    }
    if provider.user:
      opts.auth = {
        username: provider.user
        password: Config.required(provider.passwordSecretId)
      }

    client = new Client(opts)
    client

  static init(resource, setupContext): void -/>
    setupContext._mgr.registerPort(resource)

  static destroy(resource): void -/>
    <- resource.close()

Container.provide(ElasticsearchClientPort)
