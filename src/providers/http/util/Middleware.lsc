import { errors, CommonError, PlainObjectMarshal } from '@enmeshed/errors'
import url from 'url'

export createFirstMiddleware(baseContext, serviceName) ->
  firstMiddleware(req, res, next) ->
    pathname = url.parse(req.url).pathname

    // Restore context from wire
    context = Context.push({
      type: 'http'
      base: baseContext
      parent: {
        headers: req.headers
      }
    })
    req.context = context

    // Begin tracing span for request
    context.tracing.startSpan({
      name: `${req.method} ${pathname}`
      reference: {
        relationship: 'parent'
        headers: req.headers
        context: context.parent
      }
    })
    context.tracing.span.setTag('span.kind', 'server')
    log.tag('component', 'http')
    log.tag('http.method', req.method)
    log.tag('http.url', req.url)

    log.trace({event: 'request_received'})

    // include trace ID in headers so that we can debug slow requests we see in
    // the browser by looking up the trace ID found in response headers
    for key k, val v in context.tracing?.payload?.spanData or {}:
      res.setHeader(k, v)

    // finalize the span when the response is completed
    finishSpan = () => {
      // This is called outside the async context of the request.
      // Restore the log
      logHere = log.useContext(context)

      logHere.trace({event: "request_finished"})
      // // Route matching often happens after the middleware is run. Try changing the operation name
      // // to the route matcher.
      // opName = (req.route && req.route.path) || pathname
      // span.setOperationName(opName)
      context.tracing?.span?.setTag("http.status_code", res.statusCode)
      if (res.error or (res.statusCode >= 500)) {
        if res.error:
          logHere.error({error: res.error})
        else:
          err = new errors.InternalError("Unknown HTTP request error")
          logHere.error({error: err})
      }
      context.tracing?.finishSpan()
    }
    res.on('close', finishSpan)
    res.on('finish', finishSpan)

    next()

export createLastErrorHandler() ->
  lastErrorHandlingMiddleware(err, req, res, next) ->
    res.error = err
    next(err)
