import { Container, Dependencies } from '@enmeshed/alpha'
import { errors } from '@enmeshed/errors'

import { GenericServicePort } from '../GenericServicePort'
import { createFirstMiddleware, createLastErrorHandler } from './util/Middleware'

express = require('express')
http = require('http')
deferred = require('p-defer')

class HttpServicePort extends GenericServicePort:
  static providerName = "http.service.port"
  static dependencies = Dependencies.union(super.dependencies, {
    "mgr": "http.service.manager"
  })

  createApp(): void ->
    app = express()
    // Assume service is behind some proxy layer.
    app.enable('trust proxy')
    // Disallow fingerprinting
    app.disable('x-powered-by')
    // Enable first-crack middleware
    app.use(createFirstMiddleware(this.baseContext, this.service.name))

    this.app = app

  startService() -/>
    { Config, service, bindings } = this
    { provider } = this.node

    // Create base context for service
    this.baseContext = Context.create({
      base: Context.global()
      type: `http`
    })
    this.baseContext.tracing.setTracer({tracer: `http:${service.name}`})

    // Determine port number
    portIndex = provider.getServiceOrdinal(service)
    if portIndex == null:
      throw new errors.InternalError(`HttpServicePort: port not found`)
    port = Config.required("ports", Object).host_base + portIndex

    // Setup express app
    this.createApp()
    <- bindings(this.app)
    this.app.use(createLastErrorHandler(this))

    // Setup httpd
    def = deferred()
    this.server = http.createServer(this.app)
    log.info(`starting http server for ${this.service.name} on port ${port}`)
    this.server.listen(port, (err) =>
      if err:
        this.server = null
        def.reject(err)
      else:
        def.resolve()
    )
    def.promise

  stopService() ->
    server = this.server

    if server:
      def = deferred()
      server.close((err) =>
        if err:
          def.reject(err)
        else:
          this.server = null
          def.resolve()
      )
      def.promise
    else:
      Promise.resolve(undefined)

Container.provide(HttpServicePort)
