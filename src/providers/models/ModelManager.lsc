import { Provider, Container, Namespace } from '@enmeshed/alpha'
import { PooledConnectionManager } from '../mysql/util/PooledConnectionManager'
import { errors } from '@enmeshed/errors'
import { MySQLBackend } from '@ormojo/mysql'
import { ESBackend } from '@ormojo/elasticsearch'
import { typeFrom } from '@ormojo/ephraim'

import '../mysql/AnyClientPort'
import '../elasticsearch/AnyClientPort'

injectMethods(model, backend): void ->
  model.create = (data, opts) ->
    backend.create(model, data, opts)

  model.destroyById = (id, opts) ->
    backend.destroyById(model, id, opts)

  model.destroyByQuery = (q) ->
    backend.destroyByQuery(q)

  model.createQuery = (typeless) ->
    if typeless:
      backend.createQuery()
    else:
      backend.createQuery().setType(model)

  model.find(query) ->
    backend.find(query)

  model.findById(id) ->
    backend.findById(model, id)

export class ModelManager extends Provider:
  static providerName = "model.manager"
  static dependencies = {
    "mysql": "mysql"
    "elasticsearch": "elasticsearch"
  }

  static defaultBindingOptions = {
    injectMethods: true
  }

  // Static early bindings
  static bindAll(bindings): void ->
    // Delegate to manager if already live
    existingManager = Namespace.globalNamespace.checkName("model.manager")
    if existingManager and existingManager.bindAll and existingManager != this:
      return existingManager.bindAll(bindings)

    // Otherwise, store for binding when the manager comes online
    this.earlyBindings = this.earlyBindings or []
    this.earlyBindings.push(bindings)

  // Backends
  mysqlBackend = null
  esBackend = null

  init(): void -/>
    // Prevent manager resources from being freed until app shutdown.
    Container.retain(this)

    // TODO: get these from alpha
    this.mysqlBackend = new MySQLBackend(null, {
      connectionManager: new PooledConnectionManager(this.mysql)
      database: this.mysql.getMysqlOptions().database
      log: log
    })

    esProvider = this.elasticsearch.provider
    esClient = this.elasticsearch.getClient()
    this.esBackend = new ESBackend(esClient, {
      log: log
      ...if esProvider?.indexPrefix: { indexPrefix: esProvider.indexPrefix }
    })

    // Bind global early bindings
    if ModelManager.earlyBindings:
      for elem bindings in ModelManager.earlyBindings:
        log.trace("Model manager executing early binding", bindings)
        this.bindAll(bindings)
      ModelManager.earlyBindings = undefined

  destroy(): void -/>
    <- [this.mysqlBackend.shutdown(), this.esBackend.shutdown()]

  // Check if backends need migrated for data model changes
  getMigrationPlan() -/>
    sqlMig = this.mysqlBackend.createMigration()
    esMig = this.esBackend.createMigration()
    <- [sqlMig.prepare(), esMig.prepare()]
    sqlPlan = sqlMig.getMigrationPlan()
    esPlan = esMig.getMigrationPlan()

    {
      actionNeeded: sqlPlan.actionNeeded or esPlan.actionNeeded
      databases: {
        mysql: sqlPlan
        elasticsearch: esPlan
      }
    }

  doMigration(backendId): void -/>
    backend = match backendId:
      | 'mysql': this.mysqlBackend
      | 'elasticsearch': this.esBackend
      | else: throw new Error('invalid backend')

    mig = backend.createMigration()
    <- mig.prepare()
    <- mig.execute()

  // Manage bindings
  bindings = new Map()
  bindingsByName = {}

  bind(clazz, opts): void ->
    now opts = Object.assign({}, this.constructor.defaultBindingOptions, opts)
    ty = typeFrom(clazz)
    name = ty.name
    log.trace(`ModelManager: binding ${name} to ${opts.backend}`)
    if this.bindings.has(clazz) or this.bindingsByName[name]:
      throw new errors.InternalError(`ModelManager: ${name} is already bound`)
    backend = match opts.backend:
      | 'mysql': this.mysqlBackend
      | 'elasticsearch': this.esBackend
      | else: throw new errors.InternalError("ModelManager: invalid backend")
    backend.bind(clazz, opts.bindings)
    if opts.injectMethods:
      injectMethods(clazz, backend)
    this.bindings.set(clazz, clazz)
    this.bindingsByName[name] = clazz

  bindAll(bindings): void ->
    for val v in bindings:
      this.bind(v.model, v)

  // Get binding
  // TODO: Dynamic loading of bindings
  get(nameOrClass) -/>
    if looseEq(nameOrClass, null):
      throw new errors.InternalError(`ModelManager.get: name was nullish`)

    let [binding, name] = if typeof(nameOrClass) == 'string':
      [this.bindingsByName[nameOrClass], nameOrClass]
    else:
      [this.bindings.get(nameOrClass), typeFrom(nameOrClass).name]

    if not binding:
      throw new errors.InternalError(`ModelManager: no model binding for ${name}`)

    binding

Container.provide(ModelManager)
