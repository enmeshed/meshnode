import { CommonError, PlainObjectMarshal } from '@enmeshed/errors'
import { ServerEnhancer as BaseServerEnhancer } from '@enmeshed/grpc'

grpc = require('@grpc/grpc-js')

export class ServerEnhancer extends BaseServerEnhancer:
  constructor(server, baseContext, errorCodec) ->
    super(server)
    this.baseContext = baseContext
    this.errorCodec = errorCodec

  // Encode CommonErrors as metadata
  marshalError(err) ->
    log.trace("marshalError", { error: err })
    if not (err instanceof CommonError): return err

    let buf = null
    try:
      // XXX: Should we be using production censorship here? Probably should
      // be a context dependent check.
      now buf = this.errorCodec.statusToBuffer(this.errorCodec.marshalError(err))
    catch encodeError:
      log.error({err: encodeError}, 'Error while encoding another error for transport', { originalError: err })

    // Apply fields to the error that will be transferred to the Status
    // object by grpc.js
    err.code = err.getStatusCode()
    err.metadata = new grpc.Metadata()
    if buf: err.metadata.set('grpc-status-bin', buf)

    err

  requestWillBegin(requestContext): void ->
    super.requestWillBegin(requestContext)
    { metadata, fqMethodName } = requestContext
    headerMap = (metadata?.getMap() or {})

    // Create context, restoring parent context from headers sent over wire
    context = Context.push({
      type: 'grpc'
      base: this.baseContext
      parent: {
        headers: headerMap
      }
    })
    requestContext.context = context

    // Start a new opentracing span that will last the length of the request
    context.tracing.startSpan({
      name: fqMethodName
      reference: {
        relationship: 'parent'
        headers: headerMap
        context: context.parent
      }
    })

    // Set up initial span data and logs
    context.tracing.span.setTag('span.kind', 'server')
    log.tag('component', 'grpc')
    log.tag('grpc.method', fqMethodName)
    log.trace({event: "request_received"})

  requestDidEnd(requestContext): void ->
    super.requestDidEnd(requestContext)

    { error, context } = requestContext
    // Implicit context is lost when requestWillEnd; restore it so
    // we can log any errors here.
    logHere = log.useContext(context)

    if error:
      logHere.error({error})
    else:
      logHere.trace({event: "request_finished"})

    context.tracing?.finishSpan()
