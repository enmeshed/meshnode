import { ClientEnhancer as BaseClientEnhancer } from '@enmeshed/grpc'
import { errorClassForCode } from '@enmeshed/errors'

decodeErrorFromGrpcMetadata(metadata, codec) ->
  if not metadata: return null
  buf = metadata.get('grpc-status-bin')
  if (not buf) or (buf.length == 0): return null
  codec.unmarshalError(buf[0])

// Append OpenTracing and extension header data to grpc calls
export class ClientEnhancer extends BaseClientEnhancer:
  constructor(client, errorCodec) ->
    super(client)
    this.errorCodec = errorCodec

  // Translate an error object from the remote to a CommonError.
  unmarshalError(err) ->
    log.trace("unmarshalError", { err })

    try:
      // If the error came from the remote, it has {code, details, metadata}
      // Check metadata for a serialized error object first.
      if err.metadata:
        nextErr = decodeErrorFromGrpcMetadata(err.metadata, this.errorCodec)
        if nextErr: return nextErr

      // Try to make a CommonError using the grpc status code.
      if err.code:
        clazz = errorClassForCode(err.code)
        if clazz:
          nextErr = new clazz()
          nextErr.message = err.message or err.details
          return nextErr

      // Otherwise just return the regular error
      return err

    catch unmarshallingError:
      log.error( { err: unmarshallingError }, 'error while unmarshalling remote error', { originalError: err })
      return err

  requestWillBegin(requestContext): void ->
    super.requestWillBegin(requestContext)

    // Transfer header describing current context to the RPC target.
    { metadata } = requestContext
    context = Context.current()
    headersCarrier = {}
    context.toHeaders(headersCarrier)
    for key k, val v in headersCarrier:
      metadata.set(k, v)
