import { Container, Dependencies } from '@enmeshed/alpha'
import { errors } from '@enmeshed/errors'
import { GenericClientManager } from '../GenericClientManager'

import "./ClientPort"

// The GrpcClientManager caches service ports and evicts them when services
// in the environment change.
class GrpcClientManager extends GenericClientManager:
  static providerName = "grpc.client.manager"
  static dependencies = Dependencies.union(super.dependencies, {
    "protos": "protocols"
  })
  portProviderName = "grpc.client.port"

  // Locate a service that speaks the given protocol. If there are no services
  // or multiple services, the search fails.
  // TODO: cache this and dump the cache on environmentChanged
  serviceNameForProtocol(protocolName): string -/>
    // First load the protocol
    <- this.protos.definition(protocolName)

    { environment } = this.node
    serviceNames = environment.getServiceNames()
    candidateServices = [...for elem name in serviceNames:
      service = environment.getService(name)
      if service.type?.startsWith("grpc") and service.protocols?.includes(protocolName):
        [service]
    ]

    if candidateServices.length == 0:
      throw new errors.NotFoundError("serviceForProtocol", protocolName, "no matching service found")
    elif candidateServices.length > 1:
      throw new errors.FailedPreconditionError("ambiguous", "serviceForProtocol", `'${protocolName}' is provided by multiple services.`)
    else:
      candidateServices[0].name

  // Perform an indirect gRPC call
  call(target, arg) -/>
    client <- if target.meshService:
      Container.get(`grpc.client.port:${target.meshService}:${target.service}`)
    else:
      Container.get(`grpc.client.protocol:${target.service}`)

    method = client[target.method]
    if not method:
      throw new errors.NotFoundError("method", target.method)

    method.call(client, arg)


Container.provide(GrpcClientManager)
