import { errors } from '@enmeshed/errors'
import { Dependencies, Dependency , Container } from '@enmeshed/alpha'
import { GenericClientPort } from '../GenericClientPort'
import { deferred } from '../../util/deferred'

mysql = require('mysql2')

// XXX: we need this because the "connection" listener triggers off the
// raw connections and not the promisified ones.
//
// Frankly the mysql driver promise/callback situation is pretty bad
// but both major drivers that exist right now have these issues.
promisifiedQuery(conn, sql) ->
  d = deferred()
  conn.query(sql, (err, results, fields): void ->
    if err:
      d.reject(err)
    else:
      d.resolve({results, fields})
  )
  d.promise

export class MysqlClientPort extends GenericClientPort:
  static providerName = "mysql.client.port"
  static dependencies = Dependencies.union(super.dependencies, {
    "mgr": Dependency.weak("mysql.client.manager")
    "node": "node"
    "Config": "config"
  })

  // All open pools
  pools = {}

  createPool(name, overrides): void -/>
    if typeof(name) != 'string' or (not name):
      throw new errors.InvalidArgumentError('name', 'must be a nonempty string')

    if this.pools[name]:
      throw new errors.AlreadyExistsError("pool", name)

    conf = if overrides?.forceConfig:
      overrides.forceConfig
    else:
      Object.assign({}, this.dbConf, overrides)

    pool_x = mysql.createPool(conf)

    // Fix for MySQL timeout errors on pooled connections.
    // Whenever a connection is opened to the MySQL server, we will spin up
    // a setInterval process to periodically send 'SELECT 1' queries, thereby
    // preventing the connections from being terminated.
    pool_x.addListener("connection", (conn) ->
      log.info("MysqlClientPort: new pooled connection opening, registering keepalive")

      let interval = setInterval(
        (): void -/>
          try:
            <- promisifiedQuery(conn, "SELECT 1")
          catch err:
            // If the query fails, destroy the connection and stop trying
            // to keep it alive.
            log.info("MysqlClientPort: pooled connection failed keepalive check, dropping", { err })
            clearInterval(interval)
            try:
              conn.destroy()

        10000
      )
    )

    pool = pool_x.promise()
    this.pools[name] = pool

  destroyPool(name): void -/>
    pool = this.pools[name]
    if not pool: return
    this.pools[name] = undefined
    <- pool.end()

  getPool(name) ->
    p = this.pools[name]
    if not p:
      throw new errors.InternalError(`pool ${name} does not exist`)
    p

  hasPool(name) ->
    p = this.pools[name or '']
    if p: true else: false

  getPoolNames() -> Object.keys(this.pools)

  getReadConnection(): Promise<any> ->
    if this.pools["read"]:
      this.pools["read"].getConnection()
    else:
      Promise.reject(new errors.InternalError("MySQL read connection pool was not initialized"))

  getReadWriteConnection(): Promise<any> ->
    if this.pools["readwrite"]:
      this.pools["readwrite"].getConnection()
    else:
      Promise.reject(new errors.InternalError("MySQL read-write connection pool was not initialized"))

  getMysqlOptions() ->
    this.dbConf

  // ClientPort api
  startClient(): void -/>
    { service, provider, Config } = this

    log.info(`creating client for MySQL service ${service.name}`)

    // Determine default mysql config
    this.dbConf = {
      host: provider.host
      port: provider.port
      database: provider.database
      user: provider.user
      password: Config.required(provider.passwordSecretId)
      multipleStatements: true
      supportBigNumbers: true
      timezone: '+00:00'
      dateStrings: true
      bigNumberStrings: true
    }

    <- this.createPool("readwrite")

  stopClient(): void -/>
    log.info(`stopping MySQL client for ${this.service.name}`)
    <- [...for elem poolName in this.getPoolNames(): [this.destroyPool(poolName)]]
    return

Container.provide(MysqlClientPort)
