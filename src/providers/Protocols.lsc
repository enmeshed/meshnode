import { Container, Namespace, toProvider } from '@enmeshed/alpha'
import { DynamicProtocols } from '@enmeshed/grpc'
import path from 'path'

import './Config'

let bootstrapped = null
let bootstrapReqs = {}

export class Protocols:
  static require(...reqs): void -/>
    if not bootstrapped:
      for elem req in reqs:
        bootstrapReqs[req] = true
    else:
      for elem req in reqs:
        <- bootstrapped.require(req)

Container.provide(toProvider({
  name: "protocols"

  dependencies: {
    "Config": "config"
  }

  init(rsrc): void -/>
    Container.retain(rsrc)
    now bootstrapped = rsrc
    // Require any protocols that were requested during the bootstrap phase
    for key k in bootstrapReqs:
      <- rsrc.require(k)
    now bootstrapReqs = {}

  injectDependencies(deps) -/>
    { Config } = deps
    protos = new DynamicProtocols()
    protos.setProtoPath(path.resolve(Config.getConfigPath(), 'protocols'))
    protos
}))
